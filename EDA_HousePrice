setwd("C:/Users/user/Desktop/bysong/ADP/HousePrice")

#1. Library 
library(knitr) #R markdown
library(ggplot2)#Data Visualization
library(plyr)#Data Pre-Processing by R
library(dplyr)#Data Pre-Processing by C++
library(corrplot)#Correlation Matrix & Confidence Interval
library(caret)#Classification And REgression Training
library(gridExtra)#Chart Distribution
library(scales)#Data Visualization
library(Rmisc)#CI (Confidence:신뢰구간)
library(ggrepel)#ggplot Label
library(randomForest)#RandomForest
library(psych)#Descriptive Statistics Summary
library(xgboost)#xgboost

#2. Data Set
train <- read.csv("train.csv", stringsAsFactors = F)
test <- read.csv("test.csv", stringsAsFactors = F)

#3. Data size and Structure
#3-1.Check Size
dim(train)
dim(test)
head(train)
head(test)
str(train)
str(test)

#3-2.ZRbind Train and Test
##Id를 없애고, test에 SalePrice값을 NA로 채운 뒤, 두 세트를 합친다.
test_labels <- test$Id
test$Id <- NULL
train$Id <- NULL
test$SalePrice <- NA
all <- rbind(train, test)
dim(all)
str(all)

#4. Exploring some of the most important variables
#4.1 The response variable; SalePrice
##Right Skewed를 보인다. 
summary(all$SalePrice)
ggplot(data=all[!is.na(all$SalePrice),], aes(x=SalePrice)) +
        geom_histogram(fill="purple", binwidth=10000) +
        scale_x_continuous(breaks=seq(0,800000,by=100000), labels=comma)

#4.2 The most important numeric predictors
##Check the numeric variables
##4.2.1 Correlations with SalePrice

##37개의 numberic 변수가 있다.
numericVars <- which(sapply(all, is.numeric))
str(numericVars)
numericVarNames <- names(numericVars)
numericVarNames
cat('There are', length(numericVars), 'numeric variables')

##상관계수가 0.5이상인 변수들만 추출 및 상관계수 그래프 그리기
all_numVar <- all[,numericVars]
head(all_numVar)
cor_numVar <- cor(all_numVar, use="pairwise.complete.obs")
cor_numVar[,'SalePrice']
cor_sorted <- as.matrix(sort(abs(cor_numVar[,'SalePrice']), decreasing=TRUE))
cor_sorted
CorHigh <- names(which(apply(cor_sorted, 1, function(x) abs(x)>0.5)))
CorHigh
#"OverallQual"  "GrLivArea"    "GarageCars"  
#"GarageArea"   "TotalBsmtSF"  "X1stFlrSF"    "FullBath"    
#"TotRmsAbvGrd" "YearBuilt"    "YearRemodAdd"
cor_numVar <- cor_numVar[CorHigh, CorHigh]
corrplot.mixed(cor_numVar, tl.col="black", tl.pos="lt")

##4.2.2 Overall Quality
##OverallQual 은 1~10점까지 점수를 매긴 것이므로 factor 처리 후 boxplot
##점수가 높을 수록 집값이 비싸다.
##outlier 후보로 4점 중에 가장 높은 값을 보이는 값이 있다.
summary(all$OverallQual)
ggplot(data=all[!is.na(all$SalePrice),], aes(x=factor(OverallQual), y=SalePrice)) +
        geom_boxplot(col='purple') + labs(x='Overall Quality') +
        scale_y_continuous(breaks=seq(0,800000, by=100000), labels=comma)

##4.2.3 GrLivArea (Grade Living Area)
##큰 집일 수록 집값이 비싸다.
## 두 곳(524,1299)은 집이 큰데도 불구하고 집값이 안비싸다.
## 두 곳은 outlier 후보.
summary(all$GrLivArea)
boxplot(all$GrLivArea)
ggplot(data=all[!is.na(all$SalePrice),], aes(x=GrLivArea, y=SalePrice)) +
        geom_point(col='purple') + #+ geom_smooth(method="lm",se=FALSE,color="black", aes(group=1)) +
        scale_y_continuous(breaks=seq(0,800000,by=100000), labels=comma)+
        geom_text_repel(aes(label=ifelse(all$GrLivArea[!is.na(all$SalePrice)]>4500, rownames(all), '')))

#5. Missing Data, Label Encoding and Factorizing Variables
##5.1 Completeness of the data
##Missing Value를 가진 컬럼은 34개이고, (1개는 SalePrice)
##PoolQC, MiscFeature, Alley, Fence, FireplaceQu는 1000개가 넘는다.
NAcol <- which(colSums(is.na(all))>0)
NAcol
str(NAcol)
sort(colSums(sapply(all[NAcol], is.na)), decreasing=TRUE)
cat('There are', length(NAcol), 'columns with missing values')

##5.2 Imputing Missing Data
###5.2.1 PoolQC
###NA값에 Nome으로 채운다.
###Ordery Factor 이므로, None:0점, Fa:2점, Gd:4점, Ex:5점을 준다.
###PoolArea>0 인데, PoolQC가 0점인 것 확인 후 재배점
summary(as.factor(all$PoolQC))
all$PoolQC[is.na(all$PoolQC)] <- 'None'
Qualities <- c('None'=0, 'Po'=1, 'Fa'=2, 'TA'=3, 'Gd'=4, 'Ex'=5)
all$PoolQC <- as.integer(revalue(all$PoolQC, Qualities))
table(all$PoolQC)
all[all$PoolArea>0 & all$PoolQC==0,c('PoolArea','PoolQC','OverallQual')]
all$PoolQC[2412] <- 2
all$PoolQC[2504] <- 3
all$PoolQC[2600] <- 2

###5.2.2 Miscellaneous Feature
###NA값을 None으로 채운다.
###barplot을 그려보니 딱히 의미있어 보이지 않는다.
all$MiscFeature[is.na(all$MiscFeature)] <- 'None'
summary(as.factor(all$MiscFeature))
ggplot(all[!is.na(all$SalePrice),], aes(x=as.factor(MiscFeature), y=SalePrice)) +
        geom_bar(stat='summary', fun.y='median',fill='purple') +
        scale_y_continuous(breaks=seq(0,800000,by=100000), labels=comma) +
        geom_label(stat="count", aes(label=..count.., y=..count..))

###5.2.3 Alley
###NA값을 None으로 채운다.
summary(as.factor(all$Alley))
all$Alley[is.na(all$Alley)] <- 'None'
summary(as.factor(all$Alley))
ggplot(all[!is.na(all$SalePrice),], aes(x=Alley, y=SalePrice)) +
        geom_bar(stat='summary', fun.y='median', fill='purple') +
        scale_y_continuous(breaks=seq(0,800000,by=100000),labels=comma) +
        geom_label(stat="count", aes(label=..count.., y=..count..))

###5.2.4 Fence
###NA값을 None으로 채운다.
summary(as.factor(all$Fence))
all$Fence[is.na(all$Fence)] <- 'None'
summary(as.factor(all$Fence))
all[!is.na(all$SalePrice),] %>% group_by(Fence) %>% summarise(median=median(SalePrice), counts=n())
ggplot(all[!is.na(all$SalePrice),], aes(x=Fence, y=SalePrice)) +
        geom_bar(sta='summary', fun.y='median', fill='purple') +
        scale_y_continuous(breaks=seq(0,800000,by=100000), label=comma) +
        geom_label(stat="count", aes(label=..count.., y=..count..))

###5.2.5 FireplaceQu(NA-->None) & 점수 매기기
all$FireplaceQu[is.na(all$FireplaceQu)] <- 'None'
all$FireplaceQu<-as.integer(revalue(all$FireplaceQu, Qualities))
table(all$FireplaceQu)
table(all$Fireplaces)

###5.2.6 LotFrontage
### NA값에 Neighborhood 그룹별 median 값을 채운다.
ggplot(all[!is.na(all$LotFrontage),], aes(x=as.factor(Neighborhood), y=LotFrontage)) +
  geom_bar(stat='summary', fun.y = "median", fill='purple') +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
for (i in 1:nrow(all)){
  if(is.na(all$LotFrontage[i])){
    all$LotFrontage[i] <- as.integer(median(all$LotFrontage[all$Neighborhood==all$Neighborhood[i]], na.rm=TRUE)) 
  }
}

###5.2.7 LotShape
###NA는 없는데, 값 별로 0~3점을 주자.
table(all$LotShape)
all$LotShape <- as.integer(revalue(all$LotShape, c('IR3'=0, 'IR2'=1, 'IR1'=2, 'Reg'=3)))
table(all$LotShape)
ggplot(data=all[!is.na(all$SalePrice),], aes(x=factor(LotShape), y=SalePrice)) +
  geom_boxplot(col='purple') + labs(x='LotShape') +
  scale_y_continuous(breaks=seq(0,800000, by=100000), labels=comma)

###5.2.7 GarageYrBlt
###YearBuilt 값으로 NA값 대체
all$GarageYrBlt[is.na(all$GarageYrBlt)] <- all$YearBuilt[is.na(all$GarageYrBlt)]
length(which(is.na(all$GarageType) & is.na(all$GarageFinish) & is.na(all$GarageCond) & is.na(all$GarageQual)))

###GarageCond, Qual, Finish를 최빈값으로 채운듯
all$GarageCond[2127] <- names(sort(-table(all$GarageCond)))[1]
all$GarageQual[2127] <- names(sort(-table(all$GarageQual)))[1]
all$GarageFinish[2127] <- names(sort(-table(all$GarageFinish)))[1]

all$GarageCars[2577] <- 0
all$GarageArea[2577] <- 0
all$GarageType[2577] <- NA
#Type NA인 곳 에 No Garage
all$GarageType[is.na(all$GarageType)] <- 'No Garage'
all$GarageType <- as.factor(all$GarageType)
table(all$GarageType)
###GarageFinish에 점수매기기
all$GarageFinish[is.na(all$GarageFinish)] <- 'None'
Finish <- c('None'=0, 'Unf'=1, 'RFn'=2, 'Fin'=3)
all$GarageFinish<-as.integer(revalue(all$GarageFinish, Finish))
table(all$GarageFinish)
#GarageQual 점수매기기
all$GarageQual[is.na(all$GarageQual)] <- 'None'
all$GarageQual<-as.integer(revalue(all$GarageQual, Qualities))
table(all$GarageQual)
#GarageCond에 점수매기
all$GarageCond[is.na(all$GarageCond)] <- 'None'
all$GarageCond<-as.integer(revalue(all$GarageCond, Qualities))
table(all$GarageCond)

###5.2.8 Basement
length(which(is.na(all$BsmtQual) & is.na(all$BsmtCond) & 
               is.na(all$BsmtExposure) & is.na(all$BsmtFinType1) & 
               is.na(all$BsmtFinType2)))
###Type1로 판단하려는 것인가
all[!is.na(all$BsmtFinType1) & (is.na(all$BsmtCond)|
    is.na(all$BsmtQual)|is.na(all$BsmtExposure)|
    is.na(all$BsmtFinType2)), 
    c('BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2')]
###최빈값 집어 넣기
all$BsmtFinType2[333] <- names(sort(-table(all$BsmtFinType2)))[1]
all$BsmtExposure[c(949, 1488, 2349)] <- names(sort(-table(all$BsmtExposure)))[1]
all$BsmtCond[c(2041, 2186, 2525)] <- names(sort(-table(all$BsmtCond)))[1]
all$BsmtQual[c(2218, 2219)] <- names(sort(-table(all$BsmtQual)))[1]
###역시나 점수화 하기
all$BsmtQual[is.na(all$BsmtQual)] <- 'None'
all$BsmtQual<-as.integer(revalue(all$BsmtQual, Qualities))
table(all$BsmtQual)

all$BsmtCond[is.na(all$BsmtCond)] <- 'None'
all$BsmtCond<-as.integer(revalue(all$BsmtCond, Qualities))
table(all$BsmtCond)

all$BsmtExposure[is.na(all$BsmtExposure)] <- 'None'
Exposure <- c('None'=0, 'No'=1, 'Mn'=2, 'Av'=3, 'Gd'=4)
all$BsmtExposure<-as.integer(revalue(all$BsmtExposure, Exposure))
table(all$BsmtExposure)

all$BsmtFinType1[is.na(all$BsmtFinType1)] <- 'None'
FinType <- c('None'=0, 'Unf'=1, 'LwQ'=2, 'Rec'=3, 'BLQ'=4, 'ALQ'=5, 'GLQ'=6)
all$BsmtFinType1<-as.integer(revalue(all$BsmtFinType1, FinType))
table(all$BsmtFinType1)

all$BsmtFinType2[is.na(all$BsmtFinType2)] <- 'None'
FinType <- c('None'=0, 'Unf'=1, 'LwQ'=2, 'Rec'=3, 'BLQ'=4, 'ALQ'=5, 'GLQ'=6)
all$BsmtFinType2<-as.integer(revalue(all$BsmtFinType2, FinType))
table(all$BsmtFinType2)

###Na 0으로 채우기
all$BsmtFullBath[is.na(all$BsmtFullBath)] <-0
table(all$BsmtFullBath)

all$BsmtHalfBath[is.na(all$BsmtHalfBath)] <-0
table(all$BsmtHalfBath)

all$BsmtFinSF1[is.na(all$BsmtFinSF1)] <-0
all$BsmtFinSF2[is.na(all$BsmtFinSF2)] <-0
all$BsmtUnfSF[is.na(all$BsmtUnfSF)] <-0
all$TotalBsmtSF[is.na(all$TotalBsmtSF)] <-0

###5.2.9 NA값을 None으로 채우고, 점수화하기
###혹은 NA값을 0으로 채우기
###혹은 최빈값으로 채우기
all$MasVnrType[is.na(all$MasVnrType)] <- 'None'
Masonry <- c('None'=0, 'BrkCmn'=0, 'BrkFace'=1, 'Stone'=2)
all$MasVnrType<-as.integer(revalue(all$MasVnrType, Masonry))
table(all$MasVnrType)

all$MasVnrArea[is.na(all$MasVnrArea)] <-0

all$MSZoning[is.na(all$MSZoning)] <- names(sort(-table(all$MSZoning)))[1]
all$MSZoning <- as.factor(all$MSZoning)
table(all$MSZoning)

all$KitchenQual[is.na(all$KitchenQual)] <- 'TA' #replace with most common value
all$KitchenQual<-as.integer(revalue(all$KitchenQual, Qualities))
table(all$KitchenQual)

table(all$KitchenAbvGr)

all$Functional[is.na(all$Functional)] <- names(sort(-table(all$Functional)))[1]
all$Functional <- as.integer(revalue(all$Functional, c('Sal'=0, 'Sev'=1, 'Maj2'=2, 'Maj1'=3, 'Mod'=4, 'Min2'=5, 'Min1'=6, 'Typ'=7)))
table(all$Functional)

all$Exterior1st[is.na(all$Exterior1st)] <- names(sort(-table(all$Exterior1st)))[1]
all$Exterior1st <- as.factor(all$Exterior1st)
table(all$Exterior1st)

all$Exterior2nd[is.na(all$Exterior2nd)] <- names(sort(-table(all$Exterior2nd)))[1]
all$Exterior2nd <- as.factor(all$Exterior2nd)
table(all$Exterior2nd)

all$ExterQual<-as.integer(revalue(all$ExterQual, Qualities))
table(all$ExterQual)

all$ExterCond<-as.integer(revalue(all$ExterCond, Qualities))
table(all$ExterCond)

all$Electrical[is.na(all$Electrical)] <- names(sort(-table(all$Electrical)))[1]
all$Electrical <- as.factor(all$Electrical)
table(all$Electrical)

all$SaleType[is.na(all$SaleType)] <- names(sort(-table(all$SaleType)))[1]
all$SaleType <- as.factor(all$SaleType)
table(all$SaleType)

all$SaleCondition <- as.factor(all$SaleCondition)
table(all$SaleCondition)

###5.2.10 필요 없어보이는 column은 NULL 하여 없애기
table(all$Utilities)
all$Utilities <- NULL

##5.3 Label encoding/Factorizing the remaining character variables
###5.3.1범주형 변수들 factor형으로 변환
Charcol <- names(all[,sapply(all, is.character)])
Charcol
cat('There are', length(Charcol), 'remaining columns with character values')

all$Foundation <- as.factor(all$Foundation)
table(all$Foundation)

all$Heating <- as.factor(all$Heating)
table(all$Heating)

all$RoofStyle <- as.factor(all$RoofStyle)
table(all$RoofStyle)

all$RoofMatl <- as.factor(all$RoofMatl)
table(all$RoofMatl)

all$LandContour <- as.factor(all$LandContour)
table(all$LandContour)

all$HouseStyle <- as.factor(all$HouseStyle)
table(all$HouseStyle)

all$Neighborhood <- as.factor(all$Neighborhood)
table(all$Neighborhood)

all$Condition1 <- as.factor(all$Condition1)
table(all$Condition1)

###5.3.2순서형 변수들은 integer형으로 변환 (점수매기기)
all$HeatingQC<-as.integer(revalue(all$HeatingQC, Qualities))
table(all$HeatingQC)

all$CentralAir<-as.integer(revalue(all$CentralAir, c('N'=0, 'Y'=1)))
table(all$CentralAir)

all$LandSlope<-as.integer(revalue(all$LandSlope, c('Sev'=0, 'Mod'=1, 'Gtl'=2)))
table(all$LandSlope)

all$Street<-as.integer(revalue(all$Street, c('Grvl'=0, 'Pave'=1)))
table(all$Street)

all$PavedDrive<-as.integer(revalue(all$PavedDrive, c('N'=0, 'P'=1, 'Y'=2)))
table(all$PavedDrive)

###5.3.3순서형 변수같은데 알고보니 딱히 아닌 것 같은 것
###그냥 factor형으로 처리하자.
ggplot(all[!is.na(all$SalePrice),], aes(x=as.factor(BldgType), y=SalePrice)) +
  geom_bar(stat='summary', fun.y = "median", fill='purple')+
  scale_y_continuous(breaks= seq(0, 800000, by=100000), labels = comma) +
  geom_label(stat = "count", aes(label = ..count.., y = ..count..))

all$BldgType <- as.factor(all$BldgType)
table(all$BldgType)

##5.4 Changing some numeric variables into factors
###5.4.1 Year and Month sold
summary(all$YrSold)
summary(all$MoSold)
all$MoSold <- as.factor(all$MoSold)

###5.4.2 Year, Month 별 SalePrice barplot
ys <- ggplot(all[!is.na(all$SalePrice),], aes(x=as.factor(YrSold), y=SalePrice)) +
  geom_bar(stat='summary', fun.y = "median", fill='purple')+
  scale_y_continuous(breaks= seq(0, 800000, by=25000), labels = comma) +
  geom_label(stat = "count", aes(label = ..count.., y = ..count..)) +
  coord_cartesian(ylim = c(0, 200000)) +
  geom_hline(yintercept=163000, linetype="dashed", color = "red") #dashed line is median SalePrice

ms <- ggplot(all[!is.na(all$SalePrice),], aes(x=MoSold, y=SalePrice)) +
  geom_bar(stat='summary', fun.y = "median", fill='purple')+
  scale_y_continuous(breaks= seq(0, 800000, by=25000), labels = comma) +
  geom_label(stat = "count", aes(label = ..count.., y = ..count..)) +
  coord_cartesian(ylim = c(0, 200000)) +
  geom_hline(yintercept=163000, linetype="dashed", color = "red") #dashed line is median SalePrice

grid.arrange(ys, ms, widths=c(1,2))

###5.4.3 MSSubClass
str(all$MSSubClass)
#20  1-STORY 1946 & NEWER ALL STYLES
#30  1-STORY 1945 & OLDER
#40  1-STORY W/FINISHED ATTIC ALL AGES
#45  1-1/2 STORY - UNFINISHED ALL AGES
#50  1-1/2 STORY FINISHED ALL AGES
#60  2-STORY 1946 & NEWER
#70  2-STORY 1945 & OLDER
#75  2-1/2 STORY ALL AGES
#80  SPLIT OR MULTI-LEVEL
#85  SPLIT FOYER
#90  DUPLEX - ALL STYLES AND AGES
#120  1-STORY PUD (Planned Unit Development) - 1946 & NEWER
#150  1-1/2 STORY PUD - ALL AGES
#160  2-STORY PUD - 1946 & NEWER
#180  PUD - MULTILEVEL - INCL SPLIT LEV/FOYER
#190  2 FAMILY CONVERSION - ALL STYLES AND AGES
all$MSSubClass <- as.factor(all$MSSubClass)

#6. Visualization of important variables
numericVars <- which(sapply(all, is.numeric))
factorVars <- which(sapply(all, is.factor))
cat('There are', length(numericVars), 'numeric variables, 
    and', length(factorVars), 'categoric variables')
str(all)
which(sapply(all, is.character))
all$Alley <- as.factor(all$Alley)
all$LotConfig <- as.factor(all$LotConfig)
all$Condition2 <- as.factor(all$Condition2)
all$Fence <- as.factor(all$Fence)
all$MiscFeature <- as.factor(all$MiscFeature)
factorVars <- which(sapply(all, is.factor))
cat('There are', length(numericVars), 'numeric variables, 
    and', length(factorVars), 'categoric variables')

##6.1 Correlations again
##numberic 변수들로 상관계수 구하고,
##0.5 넘는 변수들로만 상관계수 그래프 그리기
#"OverallQual"  "GrLivArea"   
#"ExterQual"    "KitchenQual"  "GarageCars"  
#"GarageArea"   "TotalBsmtSF"  "X1stFlrSF"   
#"BsmtQual"     "FullBath"     "GarageFinish"
#"TotRmsAbvGrd" "YearBuilt"    "FireplaceQu" 
#"GarageYrBlt"  "YearRemodAdd"
all_numVar <- all[,numericVars]
cor_numVar <- cor(all_numVar, use="pairwise.complete.obs")
cor_sorted <- as.matrix(sort(cor_numVar[,'SalePrice'], decreasing=TRUE))
CorHigh <- names(which(apply(cor_sorted, 1, function(x) abs(x)>0.5)))
CorHigh
cor_numVar <- cor_numVar[CorHigh, CorHigh]

corrplot.mixed(cor_numVar, tl.col="black", tl.pos="lt", 
               tl.cex=0.7, cl.cex=0.7, number.cex=0.7)

##6.2 Finding Variable Importance with a Quick Random Forest
set.seed(2018)
quick_RF <- randomForest(x=all[1:1460,-79], y=all$SalePrice[1:1460],
                         ntree=100, importance=TRUE)
imp_RF <- importance(quick_RF)
imp_DF <- data.frame(Variables=row.names(imp_RF), MSE=imp_RF[,1])
imp_DF <- imp_DF[order(imp_DF$MSE, decreasing=TRUE),]
imp_DF

ggplot(imp_DF[1:20,], aes(x=reorder(Variables, MSE), y=MSE, fill=MSE)) +
        geom_bar(stat="identity") +
        labs(x="Variables", y="% increase MSE if Variable is randomly permuted") +
        coord_flip() + theme(legend.position = "none")

###6.2.1 Above Ground Living Area, and other surface related variables (in square feet)
###Distribution
###s6에서 outlier 이미 거른뒤 그렸다.
s1 <- ggplot(data=all, aes(x=GrLivArea)) +
      geom_density() + labs(x='Square feet living area')
s2 <- ggplot(data=all, aes(x=as.factor(TotRmsAbvGrd))) +
      geom_histogram(stat='count') + labs(x='Rooms above Ground')
s3 <- ggplot(data=all, aes(x=X1stFlrSF)) +
      geom_density() + labs(x='Squre feet first floor')
s4 <- ggplot(data=all, aes(x=X2ndFlrSF)) +
      geom_density() + labs(x='Square feet second floor')
s5 <- ggplot(data=all, aes(x=TotalBsmtSF)) +
      geom_density() + labs(x='Square feet basement')
s6 <- ggplot(data=all[all$LotArea<100000,], aes(x=LotArea)) +
      geom_density() + labs(x='Square feet lot')
s7 <- ggplot(data=all, aes(x=LotFrontage)) +
      geom_density() + labs(x='Linear feet lot frontage')
s8 <- ggplot(data=all, aes(x=LowQualFinSF)) +
      geom_histogram() + labs(x='Low quality square feet 1st&2nd')

layout <- matrix(c(1,2,5,3,4,8,6,7),4,2,byrow=TRUE)
multiplot(s1,s2,s3,s4,s5,s6,s7,s8, layout=layout)
###correlation 이 1이다..!!!!!
cor(all$GrLivArea, (all$X1stFlrSF+all$X2ndFlrSF+all$LowQualFinSF))
head(all[all$LowQualFinSF>0, c('GrLivArea', 'X1stFlrSF', 'X2ndFlrSF', 'LowQualFinSF')])

###6.2.2 The most important categorical variable; Neighborhood
n1 <- ggplot(all[!is.na(all$SalePrice),], aes(x=Neighborhood, y=SalePrice)) +
      geom_bar(stat='summary', fun.y='median', fill='purple') +
      theme(axis.text.x=element_text(angle=45, hjust=1)) +
      scale_y_continuous(breaks=seq(0,800000,by=50000),labels=comma) +
      geom_label(stat="count", aes(label=..count.., y=..count..), size=3) +
      geom_hline(yintercept=163000, linetype="dashed", color="red")

n2 <- ggplot(data=all, aes(x=Neighborhood)) +
      geom_histogram(stat="count")+
      geom_label(stat="count", aes(label=..count.., y=..count..), size=3) +
      theme(axis.text.x = element_text(angle=45, hjust=1))
grid.arrange(n1,n2)

###6.2.3 Overall Quality, and other Quality variables
###frequency distribution as well.
q1 <- ggplot(data=all, aes(x=as.factor(OverallQual))) +
  geom_histogram(stat='count')
q2 <- ggplot(data=all, aes(x=as.factor(ExterQual))) +
  geom_histogram(stat='count')
q3 <- ggplot(data=all, aes(x=as.factor(BsmtQual))) +
  geom_histogram(stat='count')
q4 <- ggplot(data=all, aes(x=as.factor(KitchenQual))) +
  geom_histogram(stat='count')
q5 <- ggplot(data=all, aes(x=as.factor(GarageQual))) +
  geom_histogram(stat='count')
q6 <- ggplot(data=all, aes(x=as.factor(FireplaceQu))) +
  geom_histogram(stat='count')
q7 <- ggplot(data=all, aes(x=as.factor(PoolQC))) +
  geom_histogram(stat='count')

layout <- matrix(c(1,2,8,3,4,8,5,6,7),3,3,byrow=TRUE)
multiplot(q1, q2, q3, q4, q5, q6, q7, layout=layout)

###The second most important categorical variable; MSSubClass
ms1 <- ggplot(all[!is.na(all$SalePrice),], aes(x=MSSubClass, y=SalePrice)) +
  geom_bar(stat='summary', fun.y = "median", fill='blue') +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_y_continuous(breaks= seq(0, 800000, by=50000), labels = comma) +
  geom_label(stat = "count", aes(label = ..count.., y = ..count..), size=3) +
  geom_hline(yintercept=163000, linetype="dashed", color = "red")
ms2 <- ggplot(data=all, aes(x=MSSubClass)) +
  geom_histogram(stat='count')+
  geom_label(stat = "count", aes(label = ..count.., y = ..count..), size=3) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
grid.arrange(ms1, ms2)

###6.2.5 Garage variables
all$GarageYrBlt[2593]
all$GarageYrBlt[2593] <- 2007 

g1 <- ggplot(data=all[all$GarageCars !=0,], aes(x=GarageYrBlt)) +
  geom_histogram()
g2 <- ggplot(data=all, aes(x=as.factor(GarageCars))) +
  geom_histogram(stat='count')
g3 <- ggplot(data= all, aes(x=GarageArea)) +
  geom_density()
g4 <- ggplot(data=all, aes(x=as.factor(GarageCond))) +
  geom_histogram(stat='count')
g5 <- ggplot(data=all, aes(x=GarageType)) +
  geom_histogram(stat='count')
g6 <- ggplot(data=all, aes(x=as.factor(GarageQual))) +
  geom_histogram(stat='count')
g7 <- ggplot(data=all, aes(x=as.factor(GarageFinish))) +
  geom_histogram(stat='count')
### GarageQual and GarageCond seem highly crrelated.
layout <- matrix(c(1,5,5,2,3,8,6,4,7),3,3,byrow=TRUE)
multiplot(g1, g2, g3, g4, g5, g6, g7, layout=layout)

###6.2.6 Basement variables
b1 <- ggplot(data=all, aes(x=BsmtFinSF1)) +
  geom_histogram() + labs(x='Type 1 finished square feet')
b2 <- ggplot(data=all, aes(x=BsmtFinSF2)) +
  geom_histogram()+ labs(x='Type 2 finished square feet')
b3 <- ggplot(data=all, aes(x=BsmtUnfSF)) +
  geom_histogram()+ labs(x='Unfinished square feet')
b4 <- ggplot(data=all, aes(x=as.factor(BsmtFinType1))) +
  geom_histogram(stat='count')+ labs(x='Rating of Type 1 finished area')
b5 <- ggplot(data=all, aes(x=as.factor(BsmtFinType2))) +
  geom_histogram(stat='count')+ labs(x='Rating of Type 2 finished area')
b6 <- ggplot(data=all, aes(x=as.factor(BsmtQual))) +
  geom_histogram(stat='count')+ labs(x='Height of the basement')
b7 <- ggplot(data=all, aes(x=as.factor(BsmtCond))) +
  geom_histogram(stat='count')+ labs(x='Rating of general condition')
b8 <- ggplot(data=all, aes(x=as.factor(BsmtExposure))) +
  geom_histogram(stat='count')+ labs(x='Walkout or garden level walls')

layout <- matrix(c(1,2,3,4,5,9,6,7,8),3,3,byrow=TRUE)
multiplot(b1, b2, b3, b4, b5, b6, b7, b8, layout=layout)

#7. Feature engineering
##7.1 Total number of Bathrooms
##새로운 변수 생성
all$TotBathrooms <- all$FullBath + (all$HalfBath*0.5) + all$BsmtFullBath + (all$BsmtHalfBath*0.5)
tb1 <- ggplot(data=all[!is.na(all$SalePrice),], aes(x=as.factor(TotBathrooms), y=SalePrice))+
  geom_point(col='purple') + #geom_smooth(method = "lm", se=FALSE, color="black", aes(group=1)) +
  scale_y_continuous(breaks= seq(0, 800000, by=100000), labels = comma)
tb2 <- ggplot(data=all, aes(x=as.factor(TotBathrooms))) +
  geom_histogram(stat='count')
grid.arrange(tb1, tb2)

##7.2 Adding 'House Age', 'Remodeled (Yes/No)', and IsNew variables
##YearBuilt와 YearRemoAdd를 비교해서 Remod변수 생성
##리모델링 된 년도와 sold된 년도 비교해서 age 변수 생성
all$Remod <- ifelse(all$YearBuilt==all$YearRemodAdd, 0, 1) #0=No Remodeling, 1=Remodeling
all$Age <- as.numeric(all$YrSold)-all$YearRemodAdd

ggplot(data=all[!is.na(all$SalePrice),], aes(x=Age, y=SalePrice))+
  geom_point(col='purple') + #geom_smooth(method = "lm", se=FALSE, color="black", aes(group=1)) +
  scale_y_continuous(breaks= seq(0, 800000, by=100000), labels = comma)

cor(all$SalePrice[!is.na(all$SalePrice)], all$Age[!is.na(all$SalePrice)])

ggplot(all[!is.na(all$SalePrice),], aes(x=as.factor(Remod), y=SalePrice)) +
  geom_bar(stat='summary', fun.y = "median", fill='purple') +
  geom_label(stat = "count", aes(label = ..count.., y = ..count..), size=6) +
  scale_y_continuous(breaks= seq(0, 800000, by=50000), labels = comma) +
  theme_grey(base_size = 18) +
  geom_hline(yintercept=163000, linetype="dashed") #dashed line is median SalePrice

##YrSold와 YearBuilt를 비교해서, 새건물인지 비교하여 IsNew변수 생성
all$IsNew <- ifelse(all$YrSold==all$YearBuilt, 1, 0)
table(all$IsNew)

ggplot(all[!is.na(all$SalePrice),], aes(x=as.factor(IsNew), y=SalePrice)) +
  geom_bar(stat='summary', fun.y = "median", fill='purple') +
  geom_label(stat = "count", aes(label = ..count.., y = ..count..), size=6) +
  scale_y_continuous(breaks= seq(0, 800000, by=50000), labels = comma) +
  theme_grey(base_size = 18) +
  geom_hline(yintercept=163000, linetype="dashed") #dashed line is median SalePrice

##7.3 Binning Neighborhood
nb1 <- ggplot(all[!is.na(all$SalePrice),], aes(x=reorder(Neighborhood, SalePrice, FUN=median), y=SalePrice)) +
  geom_bar(stat='summary', fun.y = "median", fill='purple') + labs(x='Neighborhood', y='Median SalePrice') +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_y_continuous(breaks= seq(0, 800000, by=50000), labels = comma) +
  geom_label(stat = "count", aes(label = ..count.., y = ..count..), size=3) +
  geom_hline(yintercept=163000, linetype="dashed", color = "red") #dashed line is median SalePrice
nb2 <- ggplot(all[!is.na(all$SalePrice),], aes(x=reorder(Neighborhood, SalePrice, FUN=mean), y=SalePrice)) +
  geom_bar(stat='summary', fun.y = "mean", fill='purple') + labs(x='Neighborhood', y="Mean SalePrice") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_y_continuous(breaks= seq(0, 800000, by=50000), labels = comma) +
  geom_label(stat = "count", aes(label = ..count.., y = ..count..), size=3) +
  geom_hline(yintercept=163000, linetype="dashed", color = "red") #dashed line is median SalePrice
grid.arrange(nb1, nb2)
##상위 3개 2점, 하위 3개 0점, 나머지 1점 준다.
all$NeighRich[all$Neighborhood %in% c('StoneBr', 'NridgHt', 'NoRidge')] <- 2
all$NeighRich[!all$Neighborhood %in% c('MeadowV', 'IDOTRR', 'BrDale', 'StoneBr', 'NridgHt', 'NoRidge')] <- 1
all$NeighRich[all$Neighborhood %in% c('MeadowV', 'IDOTRR', 'BrDale')] <- 0
table(all$NeighRich)

##7.4 Total Square Feet
##아래 두 변수를 합쳐서 새로운 TotalSqFeet 변수 생성
all$TotalSqFeet <- all$GrLivArea + all$TotalBsmtSF
ggplot(data=all[!is.na(all$SalePrice),], aes(x=TotalSqFeet, y=SalePrice))+
  geom_point(col='purple') + #geom_smooth(method = "lm", se=FALSE, color="black", aes(group=1)) +
  scale_y_continuous(breaks= seq(0, 800000, by=100000), labels = comma) +
  geom_text_repel(aes(label = ifelse(all$GrLivArea[!is.na(all$SalePrice)]>4500, rownames(all), '')))
##이상치 두 개 빼고 상관계수 다시 구해보기(strong!!)
cor(all$SalePrice, all$TotalSqFeet, use= "pairwise.complete.obs")
cor(all$SalePrice[-c(524, 1299)], all$TotalSqFeet[-c(524, 1299)], use= "pairwise.complete.obs")

##7.5 Consolidating Porch Variables
## 아래 4 변수 합쳐서 TotalPorchSF 만들기
all$TotalPorchSF <- all$OpenPorchSF + all$EnclosedPorch + all$X3SsnPorch + all$ScreenPorch
##상관계수 딱히.. (not strong)
cor(all$SalePrice, all$TotalPorchSF, use= "pairwise.complete.obs")
ggplot(data=all[!is.na(all$SalePrice),], aes(x=TotalPorchSF, y=SalePrice))+
  geom_point(col='purple') + #geom_smooth(method = "lm", se=FALSE, color="black", aes(group=1)) +
  scale_y_continuous(breaks= seq(0, 800000, by=100000), labels = comma)

#8. Preparing data for modeling
##8.1 Dropping highly correlated variables
##높은 상관성 보이는 변수들은 제거를 해준다.
dropVars <- c('YearRemodAdd', 'GarageYrBlt', 'GarageArea', 'GarageCond', 'TotalBsmtSF', 'TotalRmsAbvGrd', 'BsmtFinSF1')
all <- all[,!(names(all) %in% dropVars)]

##8.2 Removing outliers
all <- all[-c(524, 1299),]

##8.3 PreProcessing Predictor Variables
##numeric 변수 재정비 후, 새로 추가한 변수 추가
##나머지 변수는 factor형 변수쪽에 추가
numericVarNames <- numericVarNames[!(numericVarNames %in% c('MSSubClass', 'MoSold', 'YrSold', 'SalePrice', 'OverallQual', 'OverallCond'))] #numericVarNames was created before having done anything
numericVarNames <- append(numericVarNames, c('Age', 'TotalPorchSF', 'TotBathrooms', 'TotalSqFeet'))
DFnumeric <- all[, names(all) %in% numericVarNames]

DFfactors <- all[, !(names(all) %in% numericVarNames)]
DFfactors <- DFfactors[, names(DFfactors) != 'SalePrice']
cat('There are', length(DFnumeric), 'numeric variables, and', length(DFfactors), 'factor variables')

###8.3.1 Skewness and normalizing of the numeric predictors
###정규화를 시켜준다.
###skew값이 0.8이 넘으면, log취한 뒤, 1을 더해준다
###1을 더해주는 이유는, 0으로 나누는 이슈를 없애기 위해..
for(i in 1:ncol(DFnumeric)){
  if (abs(skew(DFnumeric[,i]))>0.8){
    DFnumeric[,i] <- log(DFnumeric[,i] +1)
  }
}
###Normalizing
PreNum <- preProcess(DFnumeric, method=c("center", "scale"))
print(PreNum)
DFnorm <- predict(PreNum, DFnumeric)
dim(DFnorm)
str(DFnorm)

###8.3.2 One hot encoding the categorical variables
###factor형 변수들을 더미화 한다.
DFdummies <- as.data.frame(model.matrix(~.-1, DFfactors))
dim(DFdummies)

###8.3.3 Removing levels with few or no observations in train or test
###더미화 했을 때, train or test 에서 값이 0개인 level은 제거한다.
ZerocolTest <- which(colSums(DFdummies[(nrow(all[!is.na(all$SalePrice),])+1):nrow(all),])==0)
colnames(DFdummies[ZerocolTest])
DFdummies <- DFdummies[,-ZerocolTest] #removing predictors

ZerocolTrain <- which(colSums(DFdummies[1:nrow(all[!is.na(all$SalePrice),]),])==0)
colnames(DFdummies[ZerocolTrain])
DFdummies <- DFdummies[,-ZerocolTrain] #removing predictor

###더미화 했을 떄, 값이 10개 미만인 level들도 없애자.
fewOnes <- which(colSums(DFdummies[1:nrow(all[!is.na(all$SalePrice),]),])<10)
colnames(DFdummies[fewOnes])
DFdummies <- DFdummies[,-fewOnes] #removing predictors
dim(DFdummies)

### 정규화한 numeric 변수들과 더미화한 factor 변수들을 합친다.
combined <- cbind(DFnorm, DFdummies)

##8.3 Dealing with Skewness of responcse variable
##skew값도 구해보고, Q-Qplot도 그려보자.
skew(all$SalePrice)
qqnorm(all$SalePrice)
qqline(all$SalePrice)
##1.87은 너무 높은 값...log값으로 정규화를 해주자
all$SalePrice <- log(all$SalePrice) #default is the natural logarithm, "+1" is not necessary as there are no 0's
skew(all$SalePrice)
qqnorm(all$SalePrice)
qqline(all$SalePrice)

##8.5 Composing train and test sets
##train 데이터와 test 데이터로 쪼개기
train1 <- combined[!is.na(all$SalePrice),]
test1 <- combined[is.na(all$SalePrice),]

#9. Modeling
##9.1 Lasso Regression Model
set.seed(27042018)
##5-cross validation 한다는 건가?
my_control <- trainControl(method="cv", number=5)
lassoGrid <- expand.grid(alpha=1, lambda=seq(0.001,0.1, by=0.0005))
##lasso modeling
lasso_mod <- train(x=train1, y=all$SalePrice[!is.na(all$SalePrice)], method="glmnet",
                   trControl=my_control, tuneGrid=lassoGrid)
##모델 결과 보기
lasso_mod$bestTune
min(lasso_mod$results$RMSE)

##Imp로 중요 변수 뽑아보기?
lassoVarImp <- varImp(lasso_mod, scale=F)
lassoImportance <- lassoVarImp$importance
varsSelected <- length(which(lassoImportance$Overall!=0))
varsNotSelected <- length(which(lassoImportance$Overall==0))
cat('Lasso uses', varsSelected, 'variables in its model, and did not select', varsNotSelected, 'variables.')

##Lasso로 predict 해보기
LassoPred <- predict(lasso_mod, test1)
predictions_lasso <- exp(LassoPred)
head(predictions_lasso)

##9.2 XGBoost model
xgb_grid = expand.grid(
  nrounds = 1000,
  eta = c(0.1, 0.05, 0.01),
  max_depth = c(2, 3, 4, 5, 6),
  gamma = 0,
  colsample_bytree=1,
  min_child_weight=c(1, 2, 3, 4 ,5),
  subsample=1
)
xgb_caret <- train(x=train1, y=all$SalePrice[!is.na(all$SalePrice)], method='xgbTree',
                      trControl=my_control, tuneGrid=xgb_grid)
xgb_caret$bestTune

label_trian <- all$SalePrice[!is.na(all$SalePrice)]
dtrain <- xgb.DMatrix(data=as.matrix(train1), label=label_train)
dtest <- xgb.DMatrix(data= as.matrix(test1))

default_param<-list(
  objective = "reg:linear",
  booster = "gbtree",
  eta=0.05, #default = 0.3
  gamma=0,
  max_depth=3, #default=6
  min_child_weight=4, #default=1
  subsample=1,
  colsample_bytree=1
)
xgbcv <- xgb.cv( params = default_param, data = dtrain, nrounds = 500, nfold = 5, showsd = T, stratified = T, print_every_n = 40, early_stopping_rounds = 10, maximize = F)
xgb_mod <- xgb.train(data = dtrain, params=default_param, nrounds = 454)
XGBpred <- predict(xgb_mod, dtest)
predictions_XGB <- exp(XGBpred) #need to reverse the log to the real values
head(predictions_XGB)

library(Ckmeans.1d.dp) #required for ggplot clustering
mat <- xgb.importance (feature_names = colnames(train1),model = xgb_mod)
xgb.ggplot.importance(importance_matrix = mat[1:20], rel_to_first = TRUE)

sub_avg <- data.frame(Id = test_labels, SalePrice = (predictions_XGB+2*predictions_lasso)/3)
head(sub_avg)

write.csv(sub_avg, file = 'average.csv', row.names = F)
